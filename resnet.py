# -*- coding: utf-8 -*-
"""Resnet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hg6Vtkh_0FtGZLdMgG74WmVAU0smk5Se
"""

import torch
import torch.nn as nn
import torch.optim as optim

class BasicCNNBlock(nn.Module):
    def __init__(self, in_channels, out_channels, kernel_size=3, stride=1, padding=1):
        super(BasicCNNBlock, self).__init__()
        self.conv = nn.Conv2d(in_channels, 2*in_channels, kernel_size, stride, padding)
        self.batch_norm = nn.BatchNorm2d(out_channels)  # Batch normalization
        self.activation = nn.ReLU()  # ReLU activation function

    def forward(self, x):
        x = self.conv(x)
        x = self.batch_norm(x)
        x = self.activation(x)
        return x


class ResNetblock(nn.Module):
    def __init__(self, in_channels, out_channels, kernel_size=3, stride=1, padding=1):
        super(ResNetblock, self).__init__()
        self.normal_block1=BasicCNNBlock(in_channels, out_channels, kernel_size=3, stride=1, padding=1)
        self.normal_block2=BasicCNNBlock(out_channels, out_channels, kernel_size=3, stride=1, padding=1)

    def forward(self, x):
        residual=x
        x = self.normal_block1(x)
        x = self.normal_block2(x)
        x+=residual
        return x


class Layer(nn.Module):
    def __init__(self, kernel_size=3, stride=1, padding=1):
        super(Layer, self).__init__()
        self.prep_layer=BasicCNNBlock(1, 64, kernel_size=3, stride=1, padding=1)
        self.normal_block1=BasicCNNBlock(64,128,kernel_size=3, stride=1, padding=1)
        self.resblock1=ResNetblock(64,128,kernel_size=3, stride=1, padding=1)
        self.normal_block2=BasicCNNBlock(128,256,kernel_size=3, stride=1, padding=1)

    def forward(self, x):
        residual=x
        x = self.normal_block1(x)
        x=self.resblock1(x)
        x+=residual
        x = self.normal_block2(x)
        x+=residual
        return x

